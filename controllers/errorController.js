const AppError = require('../utils/appError');

const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value[err.path]}`;
  return new AppError(message, 400);
};

const handleValidationErrorDB = (err) => {
  let errors = Object.values(err.errors);
  errors = errors.map((el) => el.message);
  //   const message = `${err.message}`;
  const message = `Invalid input data. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

const handleDuplicateFieldsErrorDB = (err) => {
  const value = err.errmsg.match(/(["'])(?:(?=(\\?))\2.)*?\1/)[0];
  const message = `Duplicate Field Value ${value}. Please use another value.`;
  return new AppError(message, 400);
};

const handleJWTError = () => {
  return new AppError('Invalid Token. Please login again.', 401);
};

const handleTokenExpiredError = () => {
  return new AppError('Your token has expired. Please login again', 401);
};

const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack,
  });
};

const sendErrorProd = (err, res) => {
  // added the below condition to make sure that we are sending the error response only when we know that the error is generated by us using the AppError class.
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  } else {
    // else we are returning a very generic message
    // this could come from programming or unexpected errors or any third party packages errors such as mongoose validation errors
    // 1) log the error
    console.error('Error ❌', err);
    // 2) Send generic error message
    res.status(500).json({ status: 'error', message: 'Something went wrong!' });
  }
};

module.exports = (err, req, res, next) => {
  // 500 Internal Server Error
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === 'production') {
    let error = { ...err };
    if (error.name === 'CastError') {
      error = handleCastErrorDB(error);
    } else if (error.name === 'ValidationError') {
      error = handleValidationErrorDB(error);
    } else if (error.code === 11000) {
      error = handleDuplicateFieldsErrorDB(error);
    } else if (error.name === 'JsonWebTokenError') {
      error = handleJWTError(error);
    } else if (error.name === 'TokenExpiredError') {
      error = handleTokenExpiredError(error);
    }
    sendErrorProd(error, res);
  }
};
